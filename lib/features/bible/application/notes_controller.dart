import 'package:get/get.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../domain/entities/verse.dart';
import '../domain/entities/highlight.dart';
import '../data/datasources/local_storage.dart';

class NotesController extends GetxController {
  final RxMap<String, List<VerseNote>> verseNotes = <String, List<VerseNote>>{}.obs;
  final RxMap<String, List<Highlight>> verseHighlights = <String, List<Highlight>>{}.obs;
  final LocalStorage _localStorage = LocalStorage();

  @override
  void onInit() {
    super.onInit();
    _loadData();
  }

  Future<void> _loadData() async {
    final notes = await _localStorage.getNotes();
    final highlights = await _localStorage.getHighlights();
    verseNotes.assignAll(notes);
    verseHighlights.assignAll(highlights);
  }

  void addNote(String verseReference, String content) async {
    final note = VerseNote(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      verseReference: verseReference,
      content: content,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    if (verseNotes[verseReference] == null) {
      verseNotes[verseReference] = [];
    }
    verseNotes[verseReference]!.add(note);
    await _localStorage.saveNotes(verseNotes);
    
    // Auto-save if enabled
    await _checkAutoSave(verseReference);
  }

  void addHighlight(String verseReference, int startIndex, int endIndex, HighlightColor color) async {
    final highlight = Highlight(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      verseReference: verseReference,
      startIndex: startIndex,
      endIndex: endIndex,
      color: color,
      createdAt: DateTime.now(),
    );

    if (verseHighlights[verseReference] == null) {
      verseHighlights[verseReference] = [];
    }
    verseHighlights[verseReference]!.add(highlight);
    await _localStorage.saveHighlights(verseHighlights);
  }

  Future<void> exportToNativeNotes(Verse verse) async {
    try {
      final notes = verseNotes[verse.reference] ?? [];
      final highlights = verseHighlights[verse.reference] ?? [];
      
      String exportContent = _formatExportContent(verse, notes, highlights);
      
      await Share.share(
        exportContent,
        subject: '${verse.bookName} ${verse.chapterNumber}:${verse.verseNumber} - Bible Study Notes',
      );
    } catch (e) {
      Get.snackbar('Error', 'Failed to export notes: ${e.toString()}');
    }
  }

  String _formatExportContent(Verse verse, List<VerseNote> notes, List<Highlight> highlights) {
    StringBuffer content = StringBuffer();
    
    content.writeln('üìñ ${verse.bookName} ${verse.chapterNumber}:${verse.verseNumber} (${verse.translation})');
    content.writeln();
    content.writeln('"${verse.text}"');
    content.writeln();
    
    if (highlights.isNotEmpty) {
      content.writeln('üé® Highlights:');
      for (var highlight in highlights) {
        final highlightedText = verse.text.substring(highlight.startIndex, highlight.endIndex);
        content.writeln('‚Ä¢ ${highlight.color.name.toUpperCase()}: "$highlightedText"');
      }
      content.writeln();
    }
    
    if (notes.isNotEmpty) {
      content.writeln('üìù My Notes:');
      for (var note in notes) {
        content.writeln('‚Ä¢ ${note.content}');
        content.writeln('  (${_formatDate(note.createdAt)})');
      }
      content.writeln();
    }
    
    content.writeln('Generated by Blackbird Bible App');
    
    return content.toString();
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year} ${date.hour}:${date.minute.toString().padLeft(2, '0')}';
  }



  List<VerseNote> getNotesForVerse(String reference) {
    return verseNotes[reference] ?? [];
  }

  List<Highlight> getHighlightsForVerse(String reference) {
    return verseHighlights[reference] ?? [];
  }

  void deleteNote(String noteId, String verseReference) async {
    verseNotes[verseReference]?.removeWhere((note) => note.id == noteId);
    await _localStorage.saveNotes(verseNotes);
  }

  void deleteHighlight(String highlightId, String verseReference) async {
    verseHighlights[verseReference]?.removeWhere((highlight) => highlight.id == highlightId);
    await _localStorage.saveHighlights(verseHighlights);
  }

  Future<void> _checkAutoSave(String verseReference) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final autoSave = prefs.getBool('autoSaveNotes') ?? false;
      
      if (autoSave) {
        // Find the verse by reference and auto-export
        final notes = verseNotes[verseReference] ?? [];
        final highlights = verseHighlights[verseReference] ?? [];
        
        if (notes.isNotEmpty || highlights.isNotEmpty) {
          // Create a minimal verse object for export
          final parts = verseReference.split(' ');
          if (parts.length >= 2) {
            final bookChapter = parts.sublist(0, parts.length - 1).join(' ');
            final verseNum = parts.last;
            
            String exportContent = _formatAutoSaveContent(verseReference, notes, highlights);
            
            await Share.share(
              exportContent,
              subject: '$verseReference - Bible Study Notes',
            );
          }
        }
      }
    } catch (e) {
      // Silently fail auto-save
    }
  }

  String _formatAutoSaveContent(String reference, List<VerseNote> notes, List<Highlight> highlights) {
    StringBuffer content = StringBuffer();
    
    content.writeln('üìñ $reference');
    content.writeln();
    
    if (highlights.isNotEmpty) {
      content.writeln('üé® Highlights:');
      for (var highlight in highlights) {
        content.writeln('‚Ä¢ ${highlight.color.name.toUpperCase()}');
      }
      content.writeln();
    }
    
    if (notes.isNotEmpty) {
      content.writeln('üìù Notes:');
      for (var note in notes) {
        content.writeln('‚Ä¢ ${note.content}');
      }
      content.writeln();
    }
    
    content.writeln('Auto-saved by Blackbird Bible App');
    
    return content.toString();
  }
}